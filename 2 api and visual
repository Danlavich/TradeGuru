import yfinance as yf
import pandas as pd
import requests
from io import StringIO
import matplotlib.pyplot as plt

def get_stock_data(ticker: str, start_date: str, end_date: str, interval: str ):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∞–∫—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç yfinance, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ Finam.
    
    :param ticker: –¢–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AAPL" –∏–ª–∏ "SBER")
    :param start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD")
    :param end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD")
    :param interval: –¢–∞–π–º—Ñ—Ä–µ–π–º ("1m", "5m", "1h", "1d", "1wk", "1mo")
    :return: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ [Date, Open, Close, Volume]
    """
    
    # üîπ 1. –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ yfinance
    try:
        stock = yf.Ticker(ticker)
        data = stock.history(start=start_date, end=end_date, interval=interval)
        
        if not data.empty:
            df = data[['Open', 'Close', 'Volume']].reset_index()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å Yahoo Finance –¥–ª—è {ticker}")
            return df

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å Yahoo Finance: {e}")

    # üîπ 2. –ï—Å–ª–∏ yfinance –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Finam
    print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Finam –¥–ª—è {ticker}")

    start_date_finam = start_date.replace("-", "")
    end_date_finam = end_date.replace("-", "")

    df, mf, yf = int(start_date_finam[6:]), int(start_date_finam[4:6]) - 1, int(start_date_finam[:4])
    dt, mt, yt = int(end_date_finam[6:]), int(end_date_finam[4:6]) - 1, int(end_date_finam[:4])

    timeframe_map = {"1m": 1, "5m": 2, "10m": 3, "15m": 4, "30m": 5, "1h": 6, "1d": 7, "1wk": 8, "1mo": 9}
    timeframe = timeframe_map.get(interval, 7)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 1 –¥–µ–Ω—å

    params = {
        'market': 1,
        'em': 3,
        'code': ticker,
        'apply': 0,
        'df': df, 'mf': mf, 'yf': yf,
        'dt': dt, 'mt': mt, 'yt': yt,
        'p': timeframe,
        'f': f"{ticker}_{start_date_finam}_{end_date_finam}",
        'e': '.csv',
        'cn': ticker,
        'dtf': 1,
        'tmf': 1,
        'MSOR': 1,
        'mstimever': 1,
        'sep': 3,
        'sep2': 1,
        'datf': 5,
        'at': 1
    }

    url = "https://export.finam.ru/" + params['f'] + params['e']
    response = requests.get(url, params=params)

    if response.status_code == 200 and response.text.strip():
        csv_data = StringIO(response.text)
        df = pd.read_csv(csv_data, delimiter=';', encoding='cp1251')

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å Finam –¥–ª—è {ticker}")
        return df
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Finam –¥–ª—è {ticker}")
        return None


def visualisation(df, ticker):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ü–∏–π.
    
    :param df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ [Date, Open, Close, Volume]
    :param ticker: –¢–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AAPL" –∏–ª–∏ "SBER")
    """
    df.columns = ["date", "time", "open", "high", "low", "close", "vol"]
    df['date'] = pd.to_datetime(df['date'], format='%Y%m%d')
    df.set_index('date', inplace=True)
    df = df.drop('time', axis=1)

    plt.figure(figsize=(12, 6))
    plt.plot(df['close'], label='Close Price', color='b')
    plt.title(f'{ticker} Shares')
    plt.grid()
    plt.legend()
    plt.show()


#ticker = "SBER"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–∏–∫–µ—Ä
#end_date = "2024-03-01"
#interval = "1d"  # –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å

#df = get_stock_data(ticker, start_date, end_date, interval)
#if df is not None:
 #   visualisation(df, ticker)
